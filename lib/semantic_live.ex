defmodule SemanticLive do
  @moduledoc """
  Provides LiveView Semantic-UI components that function without the use of Javascript.
  """
  import Phoenix.LiveView

  @doc """
  Renders a Dropdown LiveView. The form should be a `Phoenix.HTML.Form`. Expects `options`
  to be a list of `{name, value}` tuples, and `opts` to be a keyword-list that can be used
  to modify dropdown behaviour.

  If no form is provided, the dropdown will send a message to its parent LiveView in the form
  {:option_selected, tag, {name, value}} where tag is used to differentiate between multiple
  dropdowns.

  ## Options

    * `:class` - a binary containing space-delimited class names to be added to the
      dropdown div generated by the LiveView. Allows the style of the dropdown to be changed.

    * `:text` - initial text to be displayed in the dropdown when no option is selected. Defaults
      to 'Select'
  """
  def dropdown(form, name, options, socket, opts) when is_list(options) do
    live_render(socket, SemanticLive.Dropdown, session: Map.merge(%{
      form:     form,
      name:     name,
      options:  options
    }, Map.new(opts)))
  end
  def dropdown(form, name, options, socket) when is_list(options),
    do: dropdown(form, name, options, socket, [])
  def dropdown(options, tag, socket, opts) when is_list(options) do
    live_render(socket, SemanticLive.Dropdown, session: Map.merge(%{
      tag:      tag,
      options:  options
    }, Map.new(opts)))
  end
  def dropdown(options, tag, socket) when is_list(options),
    do: dropdown(options, tag, socket, [])

  @doc """
  Renders a Search LiveView. The form should be a `Phoenix.HTML.Form`. Expects `fun` to be a function
  that accepts a single binary query argument and returns a list of results in the form `{name, value}`.
  """
  def search(form, name, fun, socket, opts \\ []) do
    live_render(socket, SemanticLive.Search, session: Map.merge(%{
      form:     form,
      name:     name,
      search:   fun
    }, Map.new(opts)))
  end

  @doc """
  Renders a Flash LiveView. The Flash view will render a message and then hide it after 3 seconds by default
  if a flash message of the given level is assigned to the conn.

  ## Options

    * `:show_for` - an integer indicating the number of milliseconds for which the flash message should be
      visibile.
  """
  def flash(conn, level, opts \\ []) do
    live_render(conn, SemanticLive.Flash, session: Map.merge(%{
      conn:   conn,
      level:  level
    }, Map.new(opts)))
  end

  defmacro __using__(_) do
    quote do
      import SemanticLive
    end
  end
end
